import subprocess
import shutil
import os
import pwd


#Calvin Dreesman
#Playing audio

#able to play .ogg, .wav, and .mp3
#class takes no parameters, but run requires a filepath that includes the filename itself.


class Audio():

    def keywords():
        return(["Start", "Play", "Music", "Sound"])

    def help():
        return ("Audio will take in a a filepath to and including the file name itself as a string to the song you want to play. Audio will accept .odd, .wav, and .mp3")
#Takes a filepath and plays it /path/to/file/thing.mp3
    def run(filepath):
        subprocess.call(["afplay", filepath])

        
class Delete():

    def keywords():
        return ["delete", "remove", "erase"]
                   
    def help():
        print("Delete Files: Type (cancel) to exit or type (delete) to remove file.")
    
    def run(file_name):
        if os.path.exists(file_name) == True:
            response = input("Delete File: ")
            check = False
            while check == False:
                if response == "cancel":
                    print ("")
                    print ("Canceled")
                    check = True
                elif response == "delete":
                    shutil.move(file_name, "Trash")
                    print ("")
                    print ("File Removed")
                    check = True
                else:
                    print ("")
                    print ("Invalid Response: ")
                    print ("Type (delete) to remove file or type (cancel) to exit")
                    response = input("Delete File: " )
        else:
            return "File does not exsist"

class Move:
    
    def keywords():
        return ["move", "send"]
                   
    def help():
        print("Delete Files: Type (cancel) to exit or type (delete) to remove file.")
        
    def run(file_name):
        if os.path.exists(file_name) == True:
            response = input("Location: ")   # Asks the new location for file
            valid_reponses = ["Documents", "Desktop", "Downloads", "Trash"]
            while True:
                directory = ["/Users/" + pwd.getpwuid(os.getuid())[ 0 ] + "/"]
                for location in valid_reponses: # Checks if location is valid
                    if response == location:
                        directory.append(location)
                        file = ''.join(directory[0:len(directory)])
                        print (directory)
                        shutil.move(file_name, file)
                        print ("")
                        return ("File Moved")                   
                print ("")
                print ("Invalid Location: ")
                response = input("Location: " )
        else:
            return "File does not exsist"


        
"""This class gets passed no paramaters but it has a function run that takes either one or two parameters
these paramaters will specify the name and then the location of the file. the class also has a method
called Help that can be called to return a string that can help explain the overall idea of the usage of
the create keyword."""

class Create():
	def keywords():
		return(["New","Create","Make","Forge"])
	def help():
		return "this command will create a file in the current users documents folder if the user \
specifies somewhere else for the the file to be placed in this manner \
\"create hello.txt in Desktop\""
	def run(name, fileloc = "Documents/"):
		filextention = ".txt"
		for letter in range(len(name)-1):
			if name[letter] == ".":
				filextention = name[letter+1:]
				name = name[:letter+1]
				break
		try:
			file = open(fileloc+name+filextention, "x")
		except:	
			file = open("Documents/"+name+filextention,'x')
			
       
class Openoredit():
                

    def help():
        print ('This program opens a given file')
        
                

    def keywords():
        return(['open', 'edit'])
    
            
    def run(file):
        name = str(file)
        i = 0
        k=0
        spacekiller = list(name) 
        for kill in range(len(spacekiller)):
            ehh = spacekiller[kill]
            if ehh == ' ':
                i = kill
                k += 1
            elif ehh == '\\':
                i=kill
                k+=1
                
            elif ehh != ' ':
                k = 0 

                    
            if k == 1:
                spacekiller.insert(i, '\\')
                if ehh == '\\':
                    spacekiller.insert(i,'\\') #From spacekiller to this line, this loop makes the name of the code runable in this program.
                    
        for lol in spacekiller:            
            file = ''.join(spacekiller[0:len(spacekiller)])

        subprocess.run('open ' + file, shell=True) #This opens the file.




handler_lst = ['Openoredit', 'Create', 'Delete', 'Move', 'Audio']

def parser():
    print('\n','Enter command below:')
    command = str(input())
    command_lst = command.split()
    try:
        keyword = command_lst[0]
    except:
        keyword = ''
    file_name = ''
    for word in command_lst[1:]:
        file_name += word + ' '
    file_name = file_name[:-1]
    
    for handler in handler_lst:
        if keyword in eval(handler).keywords():
            eval(handler).run(file_name)
            
    parser()
    
parser()
